sim_degrees_cov[,"type"] <- "With Covariates"
all_sims <- rbind(sim_degrees_col, sim_degrees_cov)
head(all_sims)
par(mfrow=c(1,1))
library(ggplot2)
sim_degrees_col <- as.data.frame(t(sapply(1:1000, function(y)
degrees(populate_matrix(fitted_values_col)))))
sim_degrees_col[,"Model"] <- "Column Only"
sim_degrees_cov <- as.data.frame(t(sapply(1:1000, function(y)
degrees(populate_matrix(fitted_values_cov)))))
sim_degrees_cov[,"Model"] <- "With Covariates"
all_sims <- rbind(sim_degrees_col, sim_degrees_cov)
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram()
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram()
hist(sim_degrees_col$reciprocity)
hist(sim_degrees_cov$reciprocity)
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.25)
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_density()
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.2, position="identity")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.1, position="identity")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.1, position="identity", alpha=.3)
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.1, position="identity", alpha=.7)
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.1, position="identity", alpha=.3)
# Overlaid histograms
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7)
# Overlaid histograms
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.1, position="identity", alpha=.3) +
labs(title="Indegree SD Simulations", x="Reciprical Dyads")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.05, position="identity", alpha=.3) +
labs(title="Indegree SD Simulations", x="Reciprical Dyads")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.02, position="identity", alpha=.3) +
labs(title="Indegree SD Simulations", x="Reciprical Dyads")
source('~/Dropbox/networks/hw6.R', echo=TRUE)
?labs
?xlim
?geom_histogram
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_vline(xintercept=actual_degrees[2]) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
labs(title="Indegree SD Simulations", x="Indegree SD")
fit.cov <- glm(c(Y) ~  cidx + same_grade + same_race, family=binomial)
populate_matrix <- function(fitted_values){
l <- length(fitted_values)
n <- (1 + (1 + 4 * l)**.5) / 2
Y <- matrix(nrow=n, ncol=n)
mix <- sample(fitted_values)
Y[upper.tri(Y)] <- mix[1:(l/2)]
Y[lower.tri(Y)] <- mix[(l/2 + 1):l]
Y
}
degrees <- function(Y){
c(cdeg=sd(colSums(Y, na.rm=T)), reciprocity=sum(Y*t(Y),na.rm=TRUE)/2)
}
fitted_values_col <- cmodel$fitted.values
fitted_values_cov <- fit.cov$fitted.values
sim_degrees_col <- as.data.frame(t(sapply(1:1000, function(y)
degrees(populate_matrix(fitted_values_col)))))
sim_degrees_col[,"Model"] <- "Column Only"
sim_degrees_cov <- as.data.frame(t(sapply(1:1000, function(y)
degrees(populate_matrix(fitted_values_cov)))))
sim_degrees_cov[,"Model"] <- "With Covariates"
all_sims <- rbind(sim_degrees_col, sim_degrees_cov)
actual_degrees <- degrees(Y)
library(ggplot2)
# Overlaid histograms
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_vline(xintercept=actual_degrees[2]) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
labs(title="Indegree SD Simulations", x="Indegree SD")
?geom_vline
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
geom_vline(xintercept=actual_degrees[2]) +
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
geom_vline(xintercept=actual_degrees[2]) +
scale_y_continuous(limits = c(0, 80))
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
#geom_vline(xintercept=actual_degrees[2]) +
scale_y_continuous(limits = c(0, 80))
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
#geom_vline(xintercept=actual_degrees[2]) +
#scale_y_continuous(limits = c(0, 80)) +
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=cdeg, fill=Model)) +
geom_histogram(binwidth=.01, position="identity", alpha=.7) +
geom_vline(xintercept=actual_degrees[1]) +
#scale_y_continuous(limits = c(0, 80)) +
labs(title="Indegree SD Simulations", x="Indegree SD")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_vline(xintercept=actual_degrees[2]) +
geom_histogram(binwidth=.02, position="identity", alpha=.3) +
labs(title="Reciprocity Simulations", x="Reciprical Dyads")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_histogram(binwidth=.02, position="identity", alpha=.3) +
labs(title="Reciprocity Simulations", x="Reciprical Dyads")
ggplot(all_sims, aes(x=reciprocity, fill=Model)) +
geom_vline(xintercept=actual_degrees[2]) +
geom_histogram(binwidth=.02, position="identity", alpha=.3) +
labs(title="Reciprocity Simulations", x="Reciprical Dyads")
hist(s.H[,2], main="Reciprocity Values of Conditional Simulation",
xlim=c(0, 100), xlab="Reciprocated Dyads")
lines(c(sum(Y*t(Y),na.rm=TRUE)/2, sum(Y*t(Y),na.rm=TRUE)/2),
c(0,200), col="red", lwd=3)
yod <- rowSums(Y, na.rm=T)
( sum(yod)^2 - sum(yod^2) ) / ( 2*(nrow(Y)-1)^2)
mean(s.H[,2])
sum(Y*t(Y),na.rm=TRUE)/2
source('~/Dropbox/networks/hw6.R', echo=TRUE)
source('~/Dropbox/networks/hw6.R', echo=TRUE)
hist(s.H[,1], main="Indegree Values of Conditional Simulation",
xlim=c(1.3,2.2), xlab="Indegree Standard Deviation")
lines(c(sd(colSums(Y, na.rm=T)), sd(colSums(Y, na.rm=T))),
c(0,150), col="red", lwd=3)
hist(s.H[,2], main="Reciprocity Values of Conditional Simulation",
xlim=c(0, 100), xlab="Reciprocated Dyads")
lines(c(sum(Y*t(Y),na.rm=TRUE)/2, sum(Y*t(Y),na.rm=TRUE)/2),
c(0,200), col="red", lwd=3)
source('~/Dropbox/networks/hw6.R', echo=TRUE)
summary(cidx)
length(cidx)
15625-125
mean(s.H[,2])
( sum(yod)^2 - sum(yod^2) ) / ( 2*(nrow(Y)-1)^2)
mean(fitted_values_cov)
summary(fitted_values_cov)
hist(fitted_values_cov)
source('~/Dropbox/networks/hw7.R', echo=TRUE)
source('~/Dropbox/networks/hw7.R', echo=TRUE)
install.packages("ergm")
install.packages("ergm")
source('~/Dropbox/networks/hw7.R', echo=TRUE)
rowSums(Y, na.rm=T)
rowSums(Y, na.rm=T) == 0
colSums(Y, na.rm=T) == 0
coefs(ergm3)
coef(ergm3)
coef(ergm3)[grep("receiver", names(coef(ergm3)))]
?ergm
summary(coef(ergm3)[grep("receiver", names(coef(ergm3)))])
alpha <- coef(ergm3)[grep("sender", names(coef(ergm3)))]
beta <- coef(ergm3)[grep("receiver", names(coef(ergm3)))]
plot(X[-1,"age"])
plot(X[-1,"age"], beta)
plot(age=X[-1,"age"], beta)
plot(X[-1,"age"], beta, xlab="age")
warnings()
plot(X[-1,"age"], beta, xlab="age")
plot(X[-1,"age"], alpha, xlab="age")
cor(X[-1,"age"], beta)
?cor
cor(X[-1,"age"], beta, use="complete.obs")
beta < 200
beta
beta > -200
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="age")
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="age")
cor(X[-1,"age"][beta > -200], beta[beta > -200])
cor(X[-1,"age"][alpha > -200], alpha[alpha > -200])
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="age")
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="age")
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="age")
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="Age", ylab="Alpha",
main="Age vs Sender Effects", pch=19)
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="Age", ylab="Beta",
main="Age vs Receiver Effects", pch=19)
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="Age", ylab="Alpha",
main="Age vs Sender Effects", pch=19)
cor(X[-1,"age"][beta > -200], beta[beta > -200])
cor(X[-1,"age"][alpha > -200], alpha[alpha > -200])
beta_cor <- cor(X[-1,"age"][beta > -200], beta[beta > -200])
alpha_cor <- cor(X[-1,"age"][alpha > -200], alpha[alpha > -200])
beta_cor <- signif(cor(X[-1,"age"][beta > -200], beta[beta > -200]), 4)
alpha_cor <- signif(cor(X[-1,"age"][alpha > -200], alpha[alpha > -200]), 4)
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="Age", ylab="Beta",
main=paste0("Age vs Receiver Effects \n ", beta_cor), pch=19)
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="Age", ylab="Beta",
main=paste0("Age vs Receiver Effects \n Corr=", beta_cor), pch=19)
plot(X[-1,"age"][beta > -200], beta[beta > -200], xlab="Age", ylab="Beta",
main=paste0("Age vs Receiver Effects \n Corr=", beta_cor), pch=19)
plot(X[-1,"age"][alpha > -200], alpha[alpha > -200], xlab="Age", ylab="Alpha",
main=paste0("Age vs Sender Effects \n Corr=", alpha_cor), pch=19)
source('~/Dropbox/networks/hw7.R', echo=TRUE)
source('~/Dropbox/networks/hw7.R', echo=TRUE)
plot(density(rowSums(Y[X[,"age"] < median(X[,"age"]),], na.rm=T)), col="red",
main="Young vs Old Outdegree Distribution", xlab="Outdegree")
lines(density(rowSums(Y[X[,"age"] >= median(X[,"age"]),], na.rm=T)), col="blue")
legend("topright", legend=c("young", "old"), col=c("red", "blue"), lty=1)
# young age indgree vs old
plot(density(colSums(Y[,X[,"age"] >= median(X[,"age"])], na.rm=T)), col="blue",
main="Young vs Old Indegree Distribution", xlab="Indegree")
lines(density(colSums(Y[,X[,"age"] < median(X[,"age"])], na.rm=T)), col="red")
legend("topright", legend=c("young", "old"), col=c("red", "blue"), lty=1)
summary(ergm1)
sum(Y*t(Y),na.rm=TRUE)/2)
sum(Y*t(Y),na.rm=TRUE)/2
sum(Y, na.rm=T)/2
(sum(Y, na.rm=T)/2) / (sum(Y, na.rm=T)/2)
sum(Y*t(Y),na.rm=TRUE)/2
(sum(Y*t(Y),na.rm=TRUE)/2) / (sum(Y, na.rm=T)/2)
(sum(Y*t(Y),na.rm=TRUE)) / (sum(Y, na.rm=T))
summary(ergm1)
summary(glm1)
list.files("~/")
list.files("~/Tests/")
list.files("~/Tests/10581/")
help(nlminb)
source('~/Dropbox/networks/hw6/hw6.R', echo=TRUE)
source('~/Dropbox/networks/hw7/hw7.R', echo=TRUE)
rm(list=ls())
load("~/Downloads/rda/data/addhealth9.RData")
library(igraph)
str(addhealth9)
summary(addhealth9[[1]])
nrow(addhealth9[[2]])
males <- !is.na(addhealth9[["X"]][,"female"]) & addhealth9[["X"]][,"female"] == 0
X <- addhealth9[["X"]][males,]
Y <- matrix(0, length(males), length(males)); diag(Y) <- NA
Y[addhealth9[[1]][,1:2]] <- 1
Y <- Y[males, males]
### Question 1
hist(apply(Y,1,sum,na.rm=T), main="Distribution of Male Friendship Outdegrees")
hist(apply(Y,2,sum,na.rm=T), main="Distribution of Male Friendship Indegrees")
g1 <- graph.adjacency(Y)
V(g1)$color <- X[,"race"]
plot(g1, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
plot(g1, layout=layout.kamada.kawai, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
plot(g1, layout=layout.reingold.tilford, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
plot(g1, layout=layout.fruchterman.reingold, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
plot(g1, layout=layout.kamada.kawai, vertex.label=NA,
vertex.size=8, edge.arrow.size=.25)
library(shiny); library(ggplot2); library(grid); library(data.table)
rm(list=ls())
source("~/Desktop/stuff/males/level2_app/rmse.R")
causes <- list.dirs("~/Desktop/stuff/males/level2/", recursive=FALSE)
causes <- sapply(causes, function(x) strsplit(x, "/")[[1]][9])[file.exists(paste0(causes, "/data.Rda"))]
data_paths <- paste0("~/Desktop/stuff/males/level2/", causes, "/data.Rda")
titles <- c("OLS", "Lee Carter", "MAP")
names(titles) <- c("yols", "ylc", "ymap")
names(data_paths) <- causes
names(causes) <- causes
data <- as.list(causes)
for(i in 1:length(data)){
load(data_paths[i])
names(ca_err)[4] <- "model"
data[[i]] <- list(models, c_err, ca_err)
names(data[[i]]) <- c("models", "c_err", "ca_err")
}
lvl2_rmse <- lapply(data, function(x) lapply(x$models, rmse_all))
lvl2_rmse[[1]][[1]]
as.data.frame(lvl2_rmse[[1]][[1]])
lvl2_rmse <- lapply(data, function(x)
as.data.frame(rbindlist(lapply(x$models, rmse_all))))
lvl2_rmse <- lapply(data, function(x)
as.data.frame(rbind(lapply(x$models, rmse_all))))
lvl2_rmse[[1]]
lvl2_rmse <- lapply(data, function(x)
as.data.frame(do.call(rbind, lapply(x$models, rmse_all))))
lvl2_rmse[[1]]
rownames(lvl2_rmse[[1]])
rm(list=ls())
source("~/Desktop/stuff/males/level2_app/rmse.R")
causes <- list.dirs("~/Desktop/stuff/males/level2/", recursive=FALSE)
causes <- sapply(causes, function(x) strsplit(x, "/")[[1]][9])[file.exists(paste0(causes, "/data.Rda"))]
data_paths <- paste0("~/Desktop/stuff/males/level2/", causes, "/data.Rda")
titles <- c("OLS", "Lee Carter", "MAP")
names(titles) <- c("yols", "ylc", "ymap")
names(data_paths) <- causes
names(causes) <- causes
data <- as.list(causes)
for(i in 1:length(data)){
load(data_paths[i])
names(ca_err)[4] <- "model"
data[[i]] <- list(models, c_err, ca_err)
names(data[[i]]) <- c("models", "c_err", "ca_err")
}
names(data) <- causes
rm(list=c("models", "c_err", "ca_err"))
lvl2_rmse <- lapply(data, function(x)
as.data.frame(do.call(rbind, lapply(x$models, rmse_all))))
lvl2_rmse_year <- lapply(data, function(x) lapply(x$models, rmse_specific_year))
for(i in 1:length(lvl2_rmse_year)){
for(j in 1:3){
names(lvl2_rmse_year[[i]][[j]])[2] <- paste0("rmse", names(lvl2_rmse_year[[i]])[j])
if(j != 1){
lvl2_rmse_year[[i]][[j]][,"year"] <- NULL
}
}
lvl2_rmse_year[[i]] <- do.call(cbind, lvl2_rmse_year[[i]])
lvl2_rmse_year[[i]]$cause <- names(lvl2_rmse_year)[i]
lvl2_rmse[[i]]$model <- rownames(lvl2_rmse[[i]])
names(lvl2_rmse[[i]])[1:2] <- c("rmse_in", "rmse_out")
}
lvl2_rmse <- as.data.frame(rbindlist(lvl2_rmse))
lvl2_rmse
rm(list=ls())
source("~/Desktop/stuff/males/level2_app/rmse.R")
causes <- list.dirs("~/Desktop/stuff/males/level2/", recursive=FALSE)
causes <- sapply(causes, function(x) strsplit(x, "/")[[1]][9])[file.exists(paste0(causes, "/data.Rda"))]
data_paths <- paste0("~/Desktop/stuff/males/level2/", causes, "/data.Rda")
titles <- c("OLS", "Lee Carter", "MAP")
names(titles) <- c("yols", "ylc", "ymap")
names(data_paths) <- causes
names(causes) <- causes
data <- as.list(causes)
for(i in 1:length(data)){
load(data_paths[i])
names(ca_err)[4] <- "model"
data[[i]] <- list(models, c_err, ca_err)
names(data[[i]]) <- c("models", "c_err", "ca_err")
}
names(data) <- causes
rm(list=c("models", "c_err", "ca_err"))
lvl2_rmse <- lapply(data, function(x)
as.data.frame(do.call(rbind, lapply(x$models, rmse_all))))
lvl2_rmse_year <- lapply(data, function(x) lapply(x$models, rmse_specific_year))
for(i in 1:length(lvl2_rmse_year)){
for(j in 1:3){
names(lvl2_rmse_year[[i]][[j]])[2] <- paste0("rmse", names(lvl2_rmse_year[[i]])[j])
if(j != 1){
lvl2_rmse_year[[i]][[j]][,"year"] <- NULL
}
}
lvl2_rmse_year[[i]] <- do.call(cbind, lvl2_rmse_year[[i]])
lvl2_rmse_year[[i]]$cause <- names(lvl2_rmse_year)[i]
lvl2_rmse[[i]]$cause <- names(lvl2_rmse_year)[i]
lvl2_rmse[[i]]$model <- rownames(lvl2_rmse[[i]])
names(lvl2_rmse[[i]])[1:2] <- c("rmse_in", "rmse_out")
}
lvl2_rmse <- as.data.frame(rbindlist(lvl2_rmse))
lvl2_rmse
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library(data.table)
df <- fread("~/Downloads/all_country_future_ldi.csv")
head(df)
subset(gdp, location_id == 102 & year >= 2014)
df <- subset(df, location_id == 102 & year >= 2014)
head(df)
unique(df$year)
rm(list=ls())
library(data.table)
df <- fread("~/Downloads/all_country_future_ldi.csv")
head(df)
rm(list=ls())
library(data.table)
df <- fread("~/Downloads/all_country_future_ldi.csv")
head(df)
df <- subset(df, location_id == 102 & year >= 2014)
head(df)
names(df)
df <- fread("~/Downloads/all_country_future_ldi.csv")
unique(df$location_id)
length(unique(df$location_id))
rm(list=ls())
library(data.table)
df <- fread("~/Downloads/all_country_future_ldi.csv")
head(df)
df <- subset(df, location_id == 102 & year >= 2014)
head(df)
library(YourCats)
?write_cats
write_cats
X = matrix(rnorm(1000), nrow=1000, ncol=1)
X
X <- as.data.frame(matrix(rnorm(1000), nrow=1000, ncol=1))
X
X[,2] <- X[,1]
mpg
data(mpg)
?data
iris
X <- iris
rm(ls=list())
rm(list=ls())
X <- iris
X <- iris[,1]
iris[,5]
iris[,5] == "virginica"
Y <- as.numeric(iris[,5] == "virginica")
Y
glm(Y ~ X, family="binomial")
lm1 <- glm(Y ~ X, family="binomial")
X[,2] <- X[,1]
X2 <- cbind(X,X)
lm1 <- glm(Y ~ X2, family="binomial")
lm2 <- glm(Y ~ X2, family="binomial")
lm1 <- glm(Y ~ X, family="binomial")
lm2 <- glm(Y ~ X2, family="binomial")
summary(lm1)
summary(lm2)
?glm
shiny::runApp('Tests/mort_data/new_map_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
rm(list=ls())
df <- read.csv("~/Desktop/sev_mean_4_28_13.csv")
head(df)
summary(df)
unique(df$iso3)
as.character(unique(df$iso3))
sort(as.character(unique(df$iso3)))
head(df)
plot_sev <- function(iso="ZAF", sex=1, sev="hiv"){
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3=iso)
plot_sev <- function(iso="ZAF", sex=1, sev="hiv"){
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso)
plot(df2$year, df2[sev])
}
plot_sev()
plot_sev <- function(iso="ZAF", sex_=1, sev="hiv"){
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[sev])
}
plot_sev()
iso="ZAF"; sex_=1; sev="hiv"
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
df2$year
df2[sev]
df2[,sev]
plot_sev <- function(iso="ZAF", sex_=1, sev="hiv"){
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[,sev])
}
plot_sev()
plot_sev <- function(iso="ZAF", sex_=1, sev="hiv"){
sex_n = c("Malea", "Females")[sex_]
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[,sev], xlab="Year", ylab=sev, main=sex_n)
}
plot_sev()
summary(df)
plot_sev <- function(iso="ZAF", sex_=2, sev="hiv"){
sex_n = c("Males", "Females")[sex_]
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[,sev], xlab="Year", ylab=sev, main=sex_n)
}
plot_sev()
plot_sev <- function(iso="ZAF", sex_=2, sev="hiv"){
sex_n = c("Males", "Females")[sex_]
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[,sev], xlab="Year", ylab=sev, main=sex_n, pch=19)
}
plot_sev()
plot_sev(sex_=1)
plot_sev(iso="USA", sex_=1)
plot_sev <- function(iso="ZAF", sex_=2, sev="hiv"){
sex_n = c("Males", "Females")[sex_]
sev <- paste0("sev_", sev)
df2 <- subset(df, age==10 & iso3==iso & sex==sex_)
plot(df2$year, df2[,sev], xlab="Year", ylab=sev,
main=paste0(sex_n, ": ", iso), pch=19)
}
plot_sev(iso="USA", sex_=1)
plot_sev(iso="ZAF", sex_=1)
plot_sev(iso="CAN", sex_=1)
summary(df)
plot_sev(iso="ARG", sex_=1)
library(shiny); library(gsheet)
install.packages("shiny")
install.packages("gsheet")
library(shiny)
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
shiny::runApp('Dropbox/sopt_it/compare_app')
runApp('Dropbox/sopt_it/compare_app',host="0.0.0.0",port=5050)
runApp('Dropbox/sopt_it/compare_app',host="0.0.0.0",port=5050)
runApp('Dropbox/sopt_it/compare_app',host="0.0.0.0",port=5050, launch.browser = FALSE)
